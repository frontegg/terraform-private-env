name: Reset Frontegg Environment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  reset-env:
    if: contains(fromJSON('["eyaltam1971"]'), github.actor)
    env:
      AWS_REGION: us-east-1
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::109940070146:role/cross-account-admin-assume-role

    runs-on: ubuntu-latest

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Terraform output file for MySQL password
        run: |
          echo 'output "mysql_pass" {
            value     = random_password.mysql_password[0].result
            sensitive = true
          }' > mysql_password_output.tf
          ls -la

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=frontegg-tfstate-109940070146-us-east-1" \
            -backend-config="key=tf-state/frontegg/private-env/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=frontegg-terraform-state-lock" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Extract MySQL Terraform Outputs
        id: tf_mysql
        run: |
          terraform output -json mysql_output | grep '^{' > mysql_output.json
          echo "--- mysql_output.json content ---"
          cat mysql_output.json
          echo "---------------------------------"
          MYSQL_HOST=$(jq -r .db_instance_address mysql_output.json)
          MYSQL_USER=$(jq -r .db_instance_username mysql_output.json)
          MYSQL_PASSWORD=$(terraform output -raw mysql_pass)
          echo "Extracted MYSQL_HOST: $MYSQL_HOST"
          echo "Extracted MYSQL_USER: $MYSQL_USER"
          echo "Extracted MYSQL_PASSWORD: ***"
          echo "mysql_host=$MYSQL_HOST" >> $GITHUB_OUTPUT
          echo "mysql_user=$MYSQL_USER" >> $GITHUB_OUTPUT
          echo "mysql_password=$(echo $MYSQL_PASSWORD)" >> $GITHUB_OUTPUT

      - name: Extract Redis Terraform Outputs
        id: tf_redis
        run: |
          terraform output -json redis_output | grep '^{' > redis_output.json
          echo "--- redis_output.json content ---"
          cat redis_output.json
          echo "---------------------------------"
          REDIS_HOST=$(jq -r .elasticache_replication_group_primary_endpoint_address redis_output.json)
          echo "Extracted REDIS_HOST: $REDIS_HOST"
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT

      - name: Extract Kafka Terraform Outputs
        id: tf_kafka
        run: |
          terraform output -json msk_output | grep '^{' > msk_output.json
          echo "--- msk_output.json content ---"
          cat msk_output.json
          echo "-------------------------------"
          KAFKA_BOOTSTRAP=$(jq -r .bootstrap_brokers_plaintext msk_output.json)
          echo "Extracted KAFKA_BOOTSTRAP: $KAFKA_BOOTSTRAP"
          echo "kafka_bootstrap=$KAFKA_BOOTSTRAP" >> $GITHUB_OUTPUT

      - name: Configure Kubectl
        run: |
          aws eks update-kubeconfig --name private-env-prod-eks --region ${{ env.AWS_REGION }}
          kubectl get pods -A

      - name: Drop all MongoDB collections
        env:
          MONGO_URI: "mongodb://mongodb.frontegg.svc.cluster.local:27017/"
        run: |
          POD_NAME=$(kubectl get pods --namespace frontegg -l "app.kubernetes.io/name=mongodb,app.kubernetes.io/instance=mongodb,app.kubernetes.io/component=mongodb" -o jsonpath="{.items[0].metadata.name}")
          echo "Executing command on pod: $POD_NAME"

          echo 'db.getMongo().getDBNames().forEach(function(dbName) {
            if (dbName !== "admin" && dbName !== "local" && dbName !== "config") {
              db = db.getSiblingDB(dbName);
              db.getCollectionNames().forEach(function(c) {
                if (!c.startsWith("system.")) {
                  db[c].drop();
                }
              });
            }
          });' > drop_collections.js

          kubectl cp drop_collections.js "${POD_NAME}:/tmp/drop_collections.js" --namespace frontegg
          kubectl exec -n frontegg "$POD_NAME" -- mongosh "$MONGO_URI" --file /tmp/drop_collections.js

      - name: Flush all Redis keys
        env:
          REDIS_HOST: ${{ steps.tf_redis.outputs.redis_host }}
        run: |
          kubectl run redis-cli --image=redis:7.2-alpine -i --rm --restart=Never --command -- redis-cli -h "$REDIS_HOST" -p 6379 FLUSHALL

      - name: Drop MySQL databases
        env:
          MYSQL_HOST: ${{ steps.tf_mysql.outputs.mysql_host }}
          MYSQL_USER: ${{ steps.tf_mysql.outputs.mysql_user }}
          MYSQL_PASSWORD: ${{ steps.tf_mysql.outputs.mysql_password }}
        run: |
          kubectl run mysql-cli --image=mysql:8.0 -i --rm --restart=Never --env="MYSQL_PWD=$MYSQL_PASSWORD" --command -- mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -e "
              DROP DATABASE IF EXISTS frontegg_applications;
              DROP DATABASE IF EXISTS frontegg_audits;
              DROP DATABASE IF EXISTS frontegg_backoffice;
              DROP DATABASE IF EXISTS frontegg_custom_code;
              DROP DATABASE IF EXISTS frontegg_dashboard_env_builder;
              DROP DATABASE IF EXISTS frontegg_entitlements;
              DROP DATABASE IF EXISTS frontegg_env_duplicator;
              DROP DATABASE IF EXISTS frontegg_event_retry;
              DROP DATABASE IF EXISTS frontegg_events;
              DROP DATABASE IF EXISTS frontegg_identity;
              DROP DATABASE IF EXISTS frontegg_logs_streaming;
              DROP DATABASE IF EXISTS frontegg_oauth;
              DROP DATABASE IF EXISTS frontegg_security_engines;
              DROP DATABASE IF EXISTS frontegg_subscriptions;
              DROP DATABASE IF EXISTS frontegg_team_management;
              DROP DATABASE IF EXISTS frontegg_tenants;
              DROP DATABASE IF EXISTS frontegg_vendors;
              DROP DATABASE IF EXISTS frontegg_webhooks;
              SHOW DATABASES;
            "

      - name: Delete all Kafka topics
        env:
          KAFKA_BOOTSTRAP: ${{ steps.tf_kafka.outputs.kafka_bootstrap }}
        run: |
          echo "Listing topics from Kafka cluster..."
          TOPICS_TO_DELETE=$(kubectl run kafka-lister --image=edenhill/kcat:1.7.1 -i --rm --restart=Never -- -b "$KAFKA_BOOTSTRAP" -L | grep 'topic "' | awk -F'"' '{print $2}' | grep -v '^__')

          if [ -z "$TOPICS_TO_DELETE" ]; then
            echo "No custom topics found to delete."
            exit 0
          fi

          echo "Topics to be deleted:"
          echo "$TOPICS_TO_DELETE"

          for topic in $TOPICS_TO_DELETE; do
            echo "Deleting topic: $topic"
            kubectl run kafka-deleter --image=wurstmeister/kafka:2.13-2.8.0 -i --rm --restart=Never -- \
            bash -c "KAFKA_OPTS='' /opt/kafka/bin/kafka-topics.sh --bootstrap-server $KAFKA_BOOTSTRAP --delete --topic $topic"
          done

          echo "Topic deletion process complete."
