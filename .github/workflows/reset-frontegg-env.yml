name: Reset Frontegg Environment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  reset-env:
    if: contains(fromJSON('["eyaltam1971"]'), github.actor)
    env:
      AWS_REGION: us-east-1
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::109940070146:role/cross-account-admin-assume-role

    runs-on: ubuntu-latest

    steps:
      - name: Create Terraform output file for MySQL password
        run: |
          echo 'output "mysql_pass" {
            value     = random_password.mysql_password[0].result
            sensitive = true
          }' > mysql_password_output.tf

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=frontegg-tfstate-109940070146-us-east-1" \
            -backend-config="key=tf-state/frontegg/private-env/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=frontegg-terraform-state-lock" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Extract Terraform Outputs
        id: tf_outputs
        run: |
          # Extract MySQL Output (sensitive)
          MYSQL_OUTPUT=$(terraform output -json mysql_output)
          MYSQL_HOST=$(echo "$MYSQL_OUTPUT" | jq -r '.db_instance_address')
          MYSQL_USER=$(echo "$MYSQL_OUTPUT" | jq -r '.db_instance_username')
          echo "Extracted MYSQL_HOST: $MYSQL_HOST"
          echo "Extracted MYSQL_USER: $MYSQL_USER"
          echo "mysql_host=$MYSQL_HOST" >> $GITHUB_OUTPUT
          echo "mysql_user=$MYSQL_USER" >> $GITHUB_OUTPUT

          # Extract MySQL Password from mysql_pass output
          MYSQL_PASSWORD=$(terraform output -json mysql_pass | jq -r '.value')
          echo "Extracted MYSQL_PASSWORD: $MYSQL_PASSWORD"
          echo "mysql_password=$MYSQL_PASSWORD" >> $GITHUB_OUTPUT

          # Extract Redis Output (sensitive)
          REDIS_OUTPUT=$(terraform output -json redis_output)
          REDIS_HOST=$(echo "$REDIS_OUTPUT" | jq -r '.elasticache_replication_group_primary_endpoint_address')
          echo "Extracted REDIS_HOST: $REDIS_HOST"
          echo "redis_host=$REDIS_HOST" >> $GITHUB_OUTPUT

          # Extract MSK Output (not sensitive)
          KAFKA_BOOTSTRAP=$(terraform output -json msk_output | jq -r '.bootstrap_brokers_plaintext')
          echo "Extracted KAFKA_BOOTSTRAP: $KAFKA_BOOTSTRAP"
          echo "kafka_bootstrap=$KAFKA_BOOTSTRAP" >> $GITHUB_OUTPUT

      - name: Drop all MongoDB collections
        env:
          MONGO_URI: mongodb://mongodb
        run: |
          echo 'db.getMongo().getDBNames().forEach(function(dbName) {
            if (dbName !== "admin" && dbName !== "local" && dbName !== "config") {
              db = db.getSiblingDB(dbName);
              db.getCollectionNames().forEach(function(c) { db[c].drop(); });
            }
          });' > drop_collections.js
          docker run --rm -v $(pwd)/drop_collections.js:/drop_collections.js mongo:7.0 mongosh "$MONGO_URI" /drop_collections.js

      - name: Flush all Redis keys
        env:
          REDIS_HOST: ${{ steps.tf_outputs.outputs.redis_host }}
        run: |
          docker run --rm redis:7.2-alpine redis-cli -h "$REDIS_HOST" -p 6379 FLUSHALL

      - name: Drop MySQL databases
        env:
          MYSQL_HOST: ${{ steps.tf_outputs.outputs.mysql_host }}
          MYSQL_USER: ${{ steps.tf_outputs.outputs.mysql_user }}
          MYSQL_PASSWORD: ${{ steps.tf_outputs.outputs.mysql_password }}
        run: |
          docker run --rm -e MYSQL_PWD="$MYSQL_PASSWORD" mysql:8.0 \
            mysql -h "$MYSQL_HOST" -u "$MYSQL_USER" -e "
              DROP DATABASE IF EXISTS frontegg_applications;
              DROP DATABASE IF EXISTS frontegg_audits;
              DROP DATABASE IF EXISTS frontegg_backoffice;
              DROP DATABASE IF EXISTS frontegg_custom_code;
              DROP DATABASE IF EXISTS frontegg_dashboard_env_builder;
              DROP DATABASE IF EXISTS frontegg_entitlements;
              DROP DATABASE IF EXISTS frontegg_env_duplicator;
              DROP DATABASE IF EXISTS frontegg_event_retry;
              DROP DATABASE IF EXISTS frontegg_events;
              DROP DATABASE IF EXISTS frontegg_identity;
              DROP DATABASE IF EXISTS frontegg_logs_streaming;
              DROP DATABASE IF EXISTS frontegg_oauth;
              DROP DATABASE IF EXISTS frontegg_security_engines;
              DROP DATABASE IF EXISTS frontegg_subscriptions;
              DROP DATABASE IF EXISTS frontegg_team_management;
              DROP DATABASE IF EXISTS frontegg_tenants;
              DROP DATABASE IF EXISTS frontegg_vendors;
              DROP DATABASE IF EXISTS frontegg_webhooks;
              SHOW DATABASES;
            "

      - name: Delete all Kafka topics
        env:
          KAFKA_BOOTSTRAP: ${{ steps.tf_outputs.outputs.kafka_bootstrap }}
        run: |
          # List topics
          docker run --rm edenhill/kcat:1.7.1 -b "$KAFKA_BOOTSTRAP" -L | grep 'topic "' | awk -F'"' '{print $2}' | grep -v '^__' > topics.txt
          echo "Topics to delete:"
          cat topics.txt
          # Delete each topic using Kafka CLI
          while read topic; do
            docker run --rm wurstmeister/kafka:2.13-2.8.0 bash -c \
              "KAFKA_OPTS='' /opt/kafka/bin/kafka-topics.sh --bootstrap-server $KAFKA_BOOTSTRAP --delete --topic $topic"
          done < topics.txt
