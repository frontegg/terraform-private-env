name:  Create Customer Environment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    if: contains(fromJSON('["eyaltam1971"]'), github.actor)
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::109940070146:role/cross-account-admin-assume-role
          aws-region: us-east-1

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --name private-env-prod-eks --region us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=frontegg-tfstate-109940070146-us-east-1" \
            -backend-config="key=tf-state/frontegg/private-env/terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=frontegg-terraform-state-lock" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -detailed-exitcode
        continue-on-error: true

      - name: Terraform Apply
        if: steps.plan.exitcode == 2
        run: terraform apply -auto-approve

      - name: Set Terraform Outputs
        id: tf_outputs
        run: |
          terraform output -json msk_output > /tmp/msk_output.json
          echo "Raw MSK output from file:"
          cat /tmp/msk_output.json
          
          # Clean the file to only include the JSON object
          grep '^{' /tmp/msk_output.json > /tmp/msk_output_clean.json
          
          echo "Cleaned MSK output:"
          cat /tmp/msk_output_clean.json
          
          brokers=""
          if [[ -s /tmp/msk_output_clean.json ]] && [[ $(cat /tmp/msk_output_clean.json) != "null" ]]; then
            brokers=$(jq -r .bootstrap_brokers_plaintext /tmp/msk_output_clean.json)
          fi
          
          echo "Extracted brokers: $brokers"
          echo "msk_bootstrap_brokers=$brokers" >> $GITHUB_OUTPUT

      - name: Grant EKS Admin Access to SSO Role
        run: |
          aws eks associate-access-policy \
            --cluster-name private-env-prod-eks \
            --principal-arn "arn:aws:iam::109940070146:role/aws-reserved/sso.amazonaws.com/eu-north-1/AWSReservedSSO_AdministratorAccess_a105bdd30189cd8e" \
            --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy \
            --access-scope type=cluster

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Add Frontegg Helm repo
        run: helm repo add frontegg https://frontegg.github.io/helm-charts && helm repo update

      - name: Deploy Frontegg Core Services (MSK Enabled)
        if: steps.tf_outputs.outputs.msk_bootstrap_brokers != ''
        run: |
          helm upgrade --install frontegg-core-services frontegg/frontegg-core-services --namespace frontegg --create-namespace --devel --set global.envId=prod-frontegg-private-deployment-main-secret --set "debezium.bootstrapServers=${{ steps.tf_outputs.outputs.msk_bootstrap_brokers }}"

      - name: Deploy Frontegg Core Services (MSK Disabled)
        if: steps.tf_outputs.outputs.msk_bootstrap_brokers == ''
        run: |
          helm upgrade --install frontegg-core-services frontegg/frontegg-core-services --namespace frontegg --create-namespace --devel --set global.envId=prod-frontegg-private-deployment-main-secret --set debezium.enabled=false

      - name: Deploy Frontegg Dashboard
        run: helm upgrade --install frontegg-dashboard frontegg/frontegg-dashboard --namespace frontegg --devel --set global.envId=prod-frontegg-private-deployment-main-secret