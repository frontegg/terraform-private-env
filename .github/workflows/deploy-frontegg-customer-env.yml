name:  Create Customer Environment

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  apply:
    runs-on: ubuntu-latest
    name: Terraform Apply
    if: contains(fromJSON('["eyaltam1971"]'), github.actor)
    env:
      AWS_REGION: us-east-1
      AWS_ASSUME_ROLE_ARN: arn:aws:iam::109940070146:role/cross-account-admin-assume-role
      EKS_CLUSTER_NAME: private-env-prod-eks
      CROSS_ACCOUNT_ADMIN_ASSUME_ROLE_ARN: arn:aws:iam::109940070146:role/cross-account-admin-assume-role
      SSO_ADMIN_PRINCIPAL_ARN: arn:aws:iam::109940070146:role/aws-reserved/sso.amazonaws.com/eu-north-1/AWSReservedSSO_AdministratorAccess_a105bdd30189cd8e
      EKS_ADMIN_POLICY_ARN: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
      TF_STATE_BUCKET: frontegg-tfstate-109940070146-us-east-1
      TF_STATE_KEY: tf-state/frontegg/private-env/terraform.tfstate
      TF_STATE_LOCK_TABLE: frontegg-terraform-state-lock
      GLOBAL_ENV_ID: prod-frontegg-private-deployment-main-secret
      SETUP_JOB_EMAIL: devops@frontegg.com
      SETUP_JOB_PASSWORD: 'Fe123456!@'
      SETUP_JOB_SENDER_EMAIL: hello@onprem.backegg.io
      API_GATEWAY_URL: https://api.onprem.backegg.io
      VENDOR_HOST: onprem.backegg.io
      PORTAL_URL: https://portal.onprem.backegg.io
      CORS_ORIGIN: https://portal.onprem.backegg.io
      API_GATEWAY_IGNORED_HOSTS: localhost
      VENDORS_SERVICE_VENDORS_DOMAIN: backegg.io
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_STATE_LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Extract Terraform Outputs
        id: tf_outputs
        run: |
          # Extract OPA S3 Bucket Name
          echo "Debugging OPA S3 bucket output..."
          terraform output opa_s3_bucket_name || echo "terraform output failed"
          echo "Raw output complete"
          
          # Extract OPA bucket name and filter out debug information
          OPA_BUCKET=$(terraform output opa_s3_bucket_name | grep -E '^"[a-zA-Z0-9-]+"$' | head -n 1 | tr -d '"' | tr -d '\n')
          echo "Extracted OPA_BUCKET: '$OPA_BUCKET'"
          echo "opa_s3_bucket_name=$OPA_BUCKET" > tf_output.txt

          # Extract EKS cluster security group ID
          EKS_CLUSTER_SG=$(terraform output -raw eks_cluster_security_group_id 2>/dev/null | grep -oE '^sg-[a-zA-Z0-9]+' | head -n 1)
          echo "Extracted EKS_CLUSTER_SG: '$EKS_CLUSTER_SG'"
          echo "eks_cluster_security_group_id=$EKS_CLUSTER_SG" >> tf_output.txt

          # Extract MSK Output (as JSON)
          terraform output -json msk_output > /tmp/msk_output.json
          echo "Raw MSK output from file:"
          cat /tmp/msk_output.json

          # Clean the file to only include the JSON object
          grep '^{' /tmp/msk_output.json > /tmp/msk_output_clean.json

          echo "Cleaned MSK output:"
          cat /tmp/msk_output_clean.json

          brokers=""
          if [[ -s /tmp/msk_output_clean.json ]] && [[ $(cat /tmp/msk_output_clean.json) != "null" ]]; then
            brokers_raw=$(jq -r .bootstrap_brokers_plaintext /tmp/msk_output_clean.json)
            echo "Extracted brokers (raw): $brokers_raw"
            # Escape commas for Helm --set command
            brokers=$(echo "$brokers_raw" | sed 's/,/\\,/g')
          fi

          echo "Extracted brokers (escaped for Helm): $brokers"
          echo "msk_bootstrap_brokers=$brokers" >> tf_output.txt

          # Only now append to $GITHUB_OUTPUT
          cat tf_output.txt >> $GITHUB_OUTPUT

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: List EKS Access Entries
        run: aws eks list-access-entries --cluster-name ${{ env.EKS_CLUSTER_NAME }}

      - name: Create EKS Access Entries
        run: |
          aws eks create-access-entry \
            --cluster-name ${{ env.EKS_CLUSTER_NAME }} \
            --principal-arn "${{ env.CROSS_ACCOUNT_ADMIN_ASSUME_ROLE_ARN }}" \
            --region ${{ env.AWS_REGION }} || true

          aws eks create-access-entry \
            --cluster-name ${{ env.EKS_CLUSTER_NAME }} \
            --principal-arn "${{ env.SSO_ADMIN_PRINCIPAL_ARN }}" \
            --region ${{ env.AWS_REGION }} || true

      - name: Grant EKS Admin Access to Admin Roles
        run: |
          aws eks associate-access-policy \
            --cluster-name ${{ env.EKS_CLUSTER_NAME }} \
            --principal-arn "${{ env.CROSS_ACCOUNT_ADMIN_ASSUME_ROLE_ARN }}" \
            --access-scope type=cluster \
            --policy-arn ${{ env.EKS_ADMIN_POLICY_ARN }} \
            --region ${{ env.AWS_REGION }} || true

          aws eks associate-access-policy \
            --cluster-name ${{ env.EKS_CLUSTER_NAME }} \
            --principal-arn "${{ env.SSO_ADMIN_PRINCIPAL_ARN }}" \
            --access-scope type=cluster \
            --policy-arn ${{ env.EKS_ADMIN_POLICY_ARN }} \
            --region ${{ env.AWS_REGION }} || true

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Build MongoDB Helm Chart Dependencies
        run: helm dependency build ./helm/mongodb6

      - name: Deploy MongoDB
        run: |
          helm upgrade --install mongodb ./helm/mongodb6 \
            --namespace frontegg \
            --create-namespace \
            --values ./helm/mongodb6/values.yaml

      - name: Add NGINX Ingress Repository
        run: helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && helm repo update

      - name: Deploy NGINX Ingress Controller
        run: |
          helm upgrade --install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.service.annotations."service.beta.kubernetes.io/aws-load-balancer-security-groups"=${{ steps.tf_outputs.outputs.eks_cluster_security_group_id }} \
            --set controller.allowSnippetAnnotations=true \
            --set controller.config.allow-snippet-annotations=true \
            --set controller.enableAnnotationValidations=false \
            --set controller.config.annotations-risk-level=Critical

      - name: Wait for NGINX Ingress Controller to be ready
        run: |
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=300s

      - name: Add ExternalDNS Repository
        run: helm repo add bitnami https://charts.bitnami.com/bitnami && helm repo update

      - name: Deploy ExternalDNS
        run: |
          helm upgrade --install external-dns bitnami/external-dns \
            --namespace external-dns \
            --create-namespace \
            --set provider=aws \
            --set aws.region=${{ env.AWS_REGION }} \
            --set txtOwnerId=${{ env.EKS_CLUSTER_NAME }}

      - name: Add Frontegg Helm Repository
        run: helm repo add frontegg https://frontegg.github.io/helm-charts && helm repo update

      - name: Pull and Patch Frontegg Core Services Chart
        run: |
          helm pull frontegg/frontegg-core-services --untar --destination . --devel
          sed -i 's/| tpl .region //g' ./frontegg-core-services/templates/config-center.yaml

      - name: Deploy Frontegg Core Services
        run: |
          echo "Debug: MSK Bootstrap Brokers = '${{ steps.tf_outputs.outputs.msk_bootstrap_brokers }}'"
          echo "Debug: OPA S3 Bucket Name = '${{ steps.tf_outputs.outputs.opa_s3_bucket_name }}'"
          
          # Set default values if outputs are empty
          MSK_BROKERS="${{ steps.tf_outputs.outputs.msk_bootstrap_brokers }}"
          OPA_BUCKET="${{ steps.tf_outputs.outputs.opa_s3_bucket_name }}"
          
          if [ -z "$MSK_BROKERS" ]; then
            echo "Warning: MSK brokers is empty, using placeholder"
            MSK_BROKERS="localhost:9092"
          fi
          
          if [ -z "$OPA_BUCKET" ]; then
            echo "Warning: OPA bucket is empty, using placeholder"
            OPA_BUCKET="default-opa-bucket"
          fi
          
          helm upgrade --install frontegg-core-services ./frontegg-core-services \
            --namespace frontegg \
            --create-namespace \
            --devel \
            --set global.envId=${{ env.GLOBAL_ENV_ID }} \
            --set "debezium.bootstrapServers=$MSK_BROKERS" \
            --set environmentSetupJob.email=${{ env.SETUP_JOB_EMAIL }} \
            --set environmentSetupJob.password=${{ env.SETUP_JOB_PASSWORD }} \
            --set environmentSetupJob.senderEmail=${{ env.SETUP_JOB_SENDER_EMAIL }} \
            --set configCenter.frontegg.services.apiGatewayUrl=${{ env.API_GATEWAY_URL }} \
            --set configCenter.frontegg.services.fronteggVendorHost=${{ env.VENDOR_HOST }} \
            --set configCenter.externalServices.aws.region=${{ env.AWS_REGION }} \
            --set "configCenter.frontegg.applications.entitlements.opaPolicyBucket=$OPA_BUCKET" \
            --set configCenter.frontegg.general.portalUrl=${{ env.PORTAL_URL }} \
            --set configCenter.frontegg.general.corsOrigin=${{ env.CORS_ORIGIN }} \
            --set configCenter.frontegg.applications.apiGateway.apiGatewayIgnoredHosts=${{ env.API_GATEWAY_IGNORED_HOSTS }} \
            --set configCenter.frontegg.applications.vendors.vendorsServiceVendorsDomain=${{ env.VENDORS_SERVICE_VENDORS_DOMAIN }} \
            --values ./helm/frontegg-core-services/api-gateway-ingress-values.yaml

      - name: Deploy Frontegg Dashboard
        run: |
          helm upgrade --install frontegg-dashboard frontegg/frontegg-dashboard \
            --namespace frontegg \
            --devel \
            --set global.envId=${{ env.GLOBAL_ENV_ID }} \
            --values ./helm/frontegg-dashboard/dashboard-ingress-values.yaml